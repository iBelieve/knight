; -*- mode: Clojure -*-

(def js-keywords (set "var" "let" "const"))

(defn compiler-error [form msg]
  (if (and (meta form) (.-loc (meta form)))
    (let [loc (.-loc (meta form)),
          source (.-source loc),
          pos (.-start loc)]
      (error (+ msg "\n\n" (marked-line source pos))))
    (error msg)))

(defn make-env []
  {functions: (hash-map),
   function-nodes: (hash-map),
   variables: (hash-map),
   is-loop: false})

(defn child-env [env]
  {variables: (hash-map-copy (.-variables env))
   loop-variables: (.-loopVariables env),
   functions: (.-functions env),
   function-nodes: (.-functionNodes env),
   is-loop: false})

(defn recur-env [env]
  {variables: (hash-map-copy (.-variables env))
   loop-variables: (js/array),
   functions: (.-functions env),
   function-nodes: (.-functionNodes env),
   is-loop: true})

(defn replace-special-chars [ident]
  (.replace (.replace (.replace (.replace ident "!" "")
                                "->" "-to-")
                      (regex "^((contains|has).*)\\?$") "$1")
            (regex "^(.*)\\?$") "is-$1"))

(defn kebabcase->camelcase [ident]
  (.replace (replace-special-chars ident)
            (regex "[-_]([a-zA-Z])" "g")
            (fn [match p1] (.toUpperCase p1))))

(defn sanitize-js-keywords [ident]
  (if (js-keyword? ident)
    (concat ident "$")
    ident))

(defn symbol->ident [symbol]
  (cond
    [(= symbol 'Symbol) "LispSymbol"]
    [else (sanitize-js-keywords (kebabcase->camelcase (symbol->string symbol)))]))

(defn define-variable [env symbol]
  (let [variables (.-variables env)]
    (if (not (contains-key? variables symbol))
      (hash-map-set! variables symbol (symbol->ident symbol)))
    (if (.-isLoop env)
      (.push (.-loopVariables env) symbol))
    (resolve-var env symbol)))

(defn define-function [env name func]
  (let [functions (.-functions env)]
    (if (contains-key? functions name)
      (error (+ "Function already defined: " (symbol->string name)))
      (hash-map-set! functions name func))
    nil))

(defn resolve-var [env symbol]
  (let [variables (.-variables env),
        functions (.-functions env),
        function-nodes (.-functionNodes env),
        string (symbol->string symbol),
        loc (if (meta symbol) (.-loc (meta symbol)))]
    (cond
      [(string-prefix? string "js/")
       {type: "Identifier",
        name: (.substring string 3),
        originalName: string,
        loc: loc}]
      [(contains-key? variables symbol)
       {type: "Identifier",
        name: (hash-map-get variables symbol),
        originalName: string,
        loc: loc}]
      [(contains-key? functions symbol)
       (if (not (contains-key? function-nodes symbol))
         (compile-function env (hash-map-get functions symbol)))
       {type: "Identifier",
        name: (.-ident (hash-map-get functions symbol)),
        originalName: string,
        loc: loc}]
      [else
       (compiler-error symbol (+ "Variable or function not found: " string " - "
                                 (map (.from js/Array (.keys variables)) symbol->string) " - "
                                 (map (.from js/Array (.keys functions)) symbol->string)))])))

(defn compile-function [env func]
  (let [func-env (child-env env)]
    (hash-map-set! (.-functionNodes env)
                   (.-name func) 'placeholder)
    (hash-map-set! (.-functionNodes env)
                   (.-name func)
                   {type: "FunctionDeclaration",
                    id: {type: "Identifier",
                         name: (.-ident func),
                         originalName: (symbol->string (.-name func)),
                         loc: (.-loc (meta (.-name func)))},
                    params: (emit-patterns func-env (.-params func)),
                    body: (emit-return-block func-env (.-body func)),
                    generator: (.-generator func),
                    loc: (.-loc func)})))
