{"version":3,"sources":["stdin"],"names":["hash-map","js/Map","hash-map-set!","map","key","value","set","read-quote","reader","first-char","pos","list","string->symbol","read-syntax","items","string","not","contains-key?","interned-symbols","Symbol","hash-map-get","has","name","js/this","get","start-pos","reader-pos","form","read","end-pos","not-nil?","meta-set!","input","line","column","skip-whitespace","c","peek-char","char-digit?","read-number","char-macro?","macro","reader-macros","read-char","parse-token","read-token","take-while","char","char-whitespace?","take-until","predicate","start-index","index","input-length","length","substring","offset","string-contains?","js/parseFloat","js/parseInt","concat","a","b","includes","token","string-prefix?","string-suffix?","string->keyword","prefix","startsWith","endsWith","interned-keywords","Keyword","meta","symbol-meta","read-syntax-quote","expand-syntax-quote","self-evaluating?","symbol?","tagged-list?","second","list?","bool?","number?","string?","keyword?","js/typeof","js/Boolean","js/Number","js/String","tag","first","js/Array","isArray","array","func","read-spread","read-unquote","read-character","error","msg","js/Error","read-string","part","ch","string2","nil?","escaped-char","read-unicode-char","d","fromCharCode","read-list","read-until","end-char","has-indent-error","start-line","start-indent","results","last-pos","indent","reader-indent-warning","reader-unterminated-error","append","indentWarnings","push","warning","find-first","w","startIndex","js/console","marked-line","seq","find","line-index","before-line-index","after-line-index","lines","split","before-line","after-line","col","caret-line","string-repeat","line-num","before-line-num","after-line-num","max-line-num-width","max","string-pad-start","str","count","repeat","toString","repr","symbol->string","string-join","js/JSON","stringify","symbol","sep","join","js/Math","values","width","filler","padStart","read-unmatched-delimiter","read-array","read-struct","js/Set","emit-defn","env","loc","args","ident","symbol->ident","params","rest","skip2","docs","not-empty?","skip1","body","func-env","child-env","define-function","sanitize-js-keywords","kebabcase->camelcase","js-keyword?","set-contains?","js-keywords","replace-special-chars","replace","regex","match","p1","toUpperCase","flags","js/RegExp","slice","hash-map-copy","variables","loopVariables","functions","functionNodes","emit-defgen","emit-set","setter","emit-set-var","emit-setter","resolve-var","emit-expression","function-nodes","compile-function","compiler-error","from","keys","emit-patterns","emit-return-block","generator","forms","emit-pattern","define-variable","isLoop","source","start","emit-return-last","filter-not-nil","map-last","emit-statement","emit-return-statement","filter","last-func","item","node","emit","expression?","emit-var","emit-list","emit-literal","callee","field-access?","emit-field","method-call?","emit-methodcall","special?","emit-specials","emit-funcall","field-name","obj","statement->expression","type","statement->iife","statement->return","expression","statements->return","test","consequent","alternate","nodes","empty?","method-name","method-args","emit-expressions","map-not-nil","js/undefined","keyword->string","negative?","neg","unbox","keyword","valueOf","emit-set-field","emit-set-index","emit-bin-op","op","reduce","acc","arg","emit-spread","emit-array","emit-fn","emit-if","if-true","if-false","emit-block","single?","emit-statements","emit-for","var","for-env","emit-def","emit-let","vars","let-env","emit-vars","grouped","pair","i","emit-cond","expr","emit-loop","loop-env","recur-env","emit-do","emit-yield","emit-recur","zip","arrays","_","emit-dict","ctx","emit-quote","knight-quote","emit-return","emit-throw","emit-new","emit-index","string->exprs","read-many","make-string-reader","has-more?","emit-module","make-env","println","log","js/Symbol","js/require","fs","path","escodegen","terser","program","option","parse","js/process","argv","output-filename","output","output-dirname","dirname","source-map-filename","basename","code","readFileSync","ast","generate","source-map","writeFileSync"],"mappings":"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","sourcesContent":["; -*- mode: Clojure -*-\n\n(defn Symbol [name]\n  (set! (.-name js/this) name)\n  (js/return))\n\n(defn Keyword [name]\n  (set! (.-name js/this) name)\n  (js/return))\n\n(defn true? [value]\n  (js/=== value true))\n\n(defn false? [value]\n  (js/=== value false))\n\n(defn truthy? [value]\n  \"A value is considered truthy if it is not false and not nil (i.e., not falsy)\"\n  (js/and (js/!== value false) (js/!= value nil)))\n\n(defn falsy? [value]\n  \"A value is considered falsy if it is false or nil\"\n  (js/or (js/=== value false) (js/== value nil)))\n\n(defn not [value]\n  (js/or (js/=== value false) (js/== value nil)))\n\n(defn nil? [value]\n  (js/== value nil))\n\n(defn not-nil? [value]\n  (js/!= value nil))\n\n(defn symbol? [value]\n  (js/instanceof value Symbol))\n\n(defn keyword? [value]\n  (js/instanceof value Keyword))\n\n(defn bool? [value]\n  (js/or (js/=== (js/typeof value) \"boolean\")\n         (js/instanceof value js/Boolean)))\n\n(defn number? [value]\n  (js/or (js/=== (js/typeof value) \"number\")\n         (js/instanceof value js/Number)))\n\n(defn positive? [value]\n  (and (number? value)\n       (> value 0)))\n\n(defn negative? [value]\n  (and (number? value)\n       (< value 0)))\n\n(defn neg [value]\n  (* -1 value))\n\n(defn char? [value]\n  (js/and (js/or (js/=== (js/typeof value) \"string\")\n                 (js/instanceof value js/String))\n          (js/=== (.-length value) 1)))\n\n(defn string? [value]\n  (js/or (js/=== (js/typeof value) \"string\")\n         (js/instanceof value js/String)))\n\n(defn list? [value]\n  (.isArray js/Array value))\n\n(defn empty? [value]\n  (js/=== (.-length value) 0))\n\n(defn single? [list]\n  (and (list? list)\n       (= (.-length list) 1)))\n\n(defn not-empty? [value]\n  (and (not-nil? value)\n       (> (.-length value) 0)))\n\n(defn list [&items]\n  (js/array &items))\n\n(defn map [array func]\n  (.map array func))\n\n(defn map-not-nil [seq func]\n  (filter-not-nil (map seq func)))\n\n(defn map-last [array func last-func]\n  (.map array\n        (fn [item index]\n          (if (= index (- (.-length array) 1))\n            (last-func item)\n            (if (nil? func)\n              item\n              (func item))))))\n\n(defn find-first [seq predicate]\n  (.find seq predicate))\n\n(defn filter [seq predicate]\n  (.filter seq predicate))\n\n(defn filter-not-nil [seq]\n  (filter seq (fn [value] (not-nil? value))))\n\n\n(defn append [list &items]\n  (js/array &list &items))\n\n(defn concat [a b]\n  (+ a b))\n\n(defn string-contains? [string substring]\n  (.includes string substring))\n\n(defn string-prefix? [string prefix]\n  (.startsWith string prefix))\n\n(defn string-suffix? [string prefix]\n  (.endsWith string prefix))\n\n(defn string-join [string sep]\n  (.join string sep))\n\n; (defn parse-float [string]\n;   (js/parseFloat string))\n\n; (defn parse-int [string]\n;   (js/parseInt string))\n\n(defn println [&args]\n  (.log js/console &(map args string)))\n\n(defn print [&args]\n  (for [arg args]\n    (.write (.-stdout js/process) (string arg))))\n\n(defn hash-map []\n  (js/new js/Map))\n\n(defn hash-map-get [map key]\n  (.get map key))\n\n(defn hash-map-set! [map key value]\n  (.set map key value))\n\n(defn hash-map-copy [map]\n  (js/new js/Map map))\n\n(defn array-copy [array]\n  (.from js/Array array))\n\n(defn contains-key? [map key]\n  (.has map key))\n\n(def interned-symbols (hash-map))\n(def interned-keywords (hash-map))\n\n(defn string->symbol [string]\n  (if (not (contains-key? interned-symbols string))\n    (hash-map-set! interned-symbols string (js/new Symbol string)))\n  (hash-map-get interned-symbols string))\n\n(defn symbol->string [symbol]\n  (.-name symbol))\n\n(defn keyword->string [keyword]\n  (.-name keyword))\n\n(defn string->keyword [string]\n  (let [substring (if (string-prefix? string \":\")\n                    (.substring string 1)\n                    (if (string-suffix? string \":\")\n                      (.substring string 0 (- (.-length string) 1))\n                      string))]\n    (if (not (contains-key? interned-keywords substring))\n      (hash-map-set! interned-keywords substring (js/new Keyword substring)))\n    (hash-map-get interned-keywords substring)))\n\n(defn first [list]\n  (nth list 0))\n\n(defn second [list]\n  (nth list 1))\n\n(defn third [list]\n  (nth list 2))\n\n(defn fourth [list]\n  (nth list 3))\n\n(defn skip1 [list]\n  (.slice list 1))\n\n(defn skip2 [list]\n  (.slice list 2))\n\n(defn split-last [seq]\n  (js/array (.slice seq 0 (- (.-length seq) 1))\n            (nth seq (- (.-length seq) 1))))\n\n(defn regex [str flags]\n  (js/new js/RegExp str flags))\n\n(defn error [msg]\n  (js/throw (js/new js/Error msg)))\n\n(defn tagged-list? [value tag]\n  (and (list? value)\n       (= (first value) tag)))\n\n(defn repr [value]\n  (cond\n    [(nil? value) \"nil\"]\n    [(symbol? value) (symbol->string value)]\n    [(list? value) (+ \"(\" (string-join (map value repr) \" \") \")\")]\n    [else (.stringify js/JSON value)]))\n\n(defgen grouped [seq count]\n  (loop [i 0]\n    (if (< i (.-length seq))\n      (do\n        (yield (.slice seq i (+ i count)))\n        (recur (+ i count))))))\n\n(defn zip [&arrays]\n  (map (first arrays)\n       (fn [_ index]\n         (map arrays (fn [array] (nth array index))))))\n\n(defn set [&values]\n  (js/new js/Set values))\n\n(defn set-contains? [set value]\n  (.has set value))\n\n(defn box [value]\n  (cond\n    [(bool? value) (js/new js/Boolean value)]\n    [(number? value) (js/new js/Number value)]\n    [(string? value) (js/new js/String value)]\n    [else value]))\n\n(defn unbox [value]\n  (if (not-nil? value)\n    (.valueOf value)\n    nil))\n\n(def symbol-meta (js/Symbol \"meta\"))\n\n(defn meta [value]\n  (nth value symbol-meta))\n\n(defn meta-set! [value meta]\n  (set! (nth value symbol-meta) meta)\n  (js/return))\n\n(defn string-repeat [str count]\n  (.repeat str count))\n\n(defn string-pad-start [string width filler]\n  (.padStart string width filler))\n\n(defn string-pad-end [string width filler]\n  (.padEnd string width filler))\n\n(defn string [value]\n  (cond\n    [(nil? value) \"nil\"]\n    [(string? value) value]\n    [(number? value) (.toString value)]\n    [(bool? value) (.toString value)]\n    [else (repr value)]))\n\n(defn max [&values]\n  (.max js/Math &values))\n; -*- mode: Clojure -*-\n\n(defn self-evaluating? [form]\n  (or (bool? form) (number? form) (string? form) (keyword? form)))\n\n(defn expand-syntax-quote [form]\n  (cond\n    [(self-evaluating? form) form]\n    [(symbol? form) (list 'quote form)]\n    [(tagged-list? form 'unquote) (second form)]\n    [(list? form) (list 'list &(map form expand-syntax-quote))]\n    [else (list 'quote form)]))\n\n(defn make-string-reader [string]\n  {input: string,\n   index: 0,\n   line: 1,\n   column: 0,\n   indent-warnings: (js/array)})\n\n(def reader-macros (hash-map))\n\n(defn reader-pos [reader]\n  {line: (.-line reader),\n   column: (.-column reader)})\n\n(defn reader-indent-warning [reader start-index end-char pos]\n  (.push (.-indentWarnings reader) {start-index: start-index, end-char: end-char, pos: pos}))\n\n(defn reader-unterminated-error [reader start-index start-pos end-char]\n  (let [warning (find-first (.-indentWarnings reader) (fn [w] (>= (.-startIndex w) start-index)))]\n    (.error js/console warning)\n    (error (+ \"Unexpected EOF, expected: '\" end-char \"'\\n\\n\"\n              \"Started here:\\n\"\n              (marked-line (.-input reader) start-pos) \"\\n\\n\"\n              \"Based on indent:\\n\"\n              (marked-line (.-input reader) (.-pos warning))))))\n\n(defn read-char [reader]\n  (let [char (nth (.-input reader) (.-index reader))]\n    (set! (.-index reader) (+ (.-index reader) 1))\n    (if (= char \\newline)\n      (do\n        (set! (.-line reader) (+ (.-line reader) 1))\n        (set! (.-column reader) 0))\n      (set! (.-column reader) (+ (.-column reader) 1)))\n    char))\n\n(defn peek-char [reader offset]\n  (nth (.-input reader)\n       (if (not-nil? offset)\n         (+ (.-index reader) offset)\n         (.-index reader))))\n\n(defn has-more? [reader]\n  (< (.-index reader) (.-length (.-input reader))))\n\n(defn char-whitespace? [char]\n  (or (= char \\space)\n      (= char \\tab)\n      (= char \\newline)\n      (= char \\,)))\n\n(defn char-digit? [char]\n  (and (>= char \\0)\n       (<= char \\9)))\n\n(defn char-macro? [char]\n  (contains-key? reader-macros char))\n\n(defn take-until [reader predicate]\n  (let [start-index (.-index reader)\n        input-length (.-length (.-input reader))]\n    (loop [index (.-index reader),\n           line (.-line reader),\n           column (.-column reader)]\n      (let [char (nth (.-input reader) index)]\n        (if (or (>= index input-length)\n                (predicate char))\n          (do\n            (set! (.-index reader) index)\n            (set! (.-line reader) line)\n            (set! (.-column reader) column)\n            (.substring (.-input reader) start-index index))\n          (if (= char \\newline)\n            (recur (+ index 1) (+ line 1) 0)\n            (recur (+ index 1) line (+ column 1))))))))\n\n(defn take-while [reader predicate]\n  (take-until reader (fn [char] (not (predicate char)))))\n\n(defn skip-whitespace [reader]\n  (loop []\n    (take-while reader (fn [char] (char-whitespace? char)))\n    (if (= (peek-char reader) \\;)\n      (do\n        (take-until reader (fn [c] (= c \\newline)))\n        (recur)))))\n\n(defn read-token [reader]\n  (concat (read-char reader)\n          (take-until reader (fn (c) (or (char-whitespace? c) (char-macro? c))))))\n\n(defn parse-token [token]\n  (cond\n    [(= token \"nil\") nil]\n    [(= token \"true\") true]\n    [(= token \"false\") false]\n    [(or (string-prefix? token \":\")\n         (string-suffix? token \":\")) (string->keyword token)]\n    [else (string->symbol token)]))\n\n(defn read-number [reader]\n  (let [string (read-token reader)]\n    (if (string-contains? string \".\")\n      (js/parseFloat string)\n      (js/parseInt string))))\n\n(defn read-character [reader]\n  (let [char (read-token reader)]\n    (cond\n      [(= char \"newline\") \\newline]\n      [(= char \"return\") \\return]\n      [(= char \"tab\") \\tab]\n      [(= char \"space\") \\space]\n      [(= (.-length char) 1) char]\n      [else (error (+ \"Unrecognized char: '\" char \"'\"))])))\n\n(defn read-quote [reader first-char pos]\n  (list 'quote (read-syntax reader)))\n\n(defn read-syntax-quote [reader first-char pos]\n  (expand-syntax-quote (read-syntax reader)))\n\n(defn read-spread [reader first-char pos]\n  (list 'spread (read-syntax reader)))\n\n(defn read-unquote [reader first-char pos]\n  (list 'unquote (read-syntax reader)))\n\n(defn read-list [reader first-char pos]\n  (read-until reader \\) pos))\n\n(defn read-array [reader first-char pos]\n  (read-until reader \\] pos))\n\n(defn read-struct [reader first-char pos]\n  (list 'dict &(read-until reader \\} pos)))\n\n(defn read-unmatched-delimiter [reader first-char]\n  (error (concat \"Unmatched delimiter: \" first-char)))\n\n(defn read-string [reader first-char pos]\n  (loop [string \"\"]\n    (let [part (take-until reader (fn [ch] (or (= ch \\\")\n                                               (= ch \\\\))))\n          string2 (concat string part)\n          char (read-char reader)]\n      (cond\n        [(nil? char) (error \"Unexpected EOF while reading string\")]\n        [(= char \\\") string2]\n        [(= char \\\\)\n         (let [char (read-char reader)\n               escaped-char (cond\n                              [(nil? char) (error \"Unexpected EOF while reading character escape\")]\n                              [(= char \\\") char]\n                              [(= char \\\\) char]\n                              [(= char \\/) char]\n                              [(= char \\n) \\newline]\n                              [(= char \\t) \\tab]\n                              [(= char \\r) \\return]\n                              [(= char \\u) (read-unicode-char reader)]\n                              [else (concat (error \"Unrecognized character escape\" char))])]\n           (recur (concat string2 escaped-char)))]))))\n\n(defn read-unicode-char [reader]\n  (let [a (read-char reader),\n        b (read-char reader),\n        c (read-char reader),\n        d (read-char reader)]\n    (.fromCharCode js/String (js/parseInt (+ a b c d)))))\n\n(defn marked-line [input pos]\n  (let [line-index (- (.-line pos) 1),\n        before-line-index (- line-index 1),\n        after-line-index (+ line-index 1),\n        lines (.split input \\newline),\n        line (nth lines line-index),\n        before-line (or (nth lines before-line-index) \"\"),\n        after-line (or (nth lines after-line-index) \"\"),\n        col (.-column pos),\n        caret-line (concat (string-repeat \" \" col) \"^\"),\n        line-num (string (+ line-index 1)),\n        before-line-num (string (+ before-line-index 1)),\n        after-line-num (string (+ after-line-index 1)),\n        max-line-num-width (max (.-length line-num)\n                                (.-length before-line-num)\n                                (.-length after-line-num))]\n    (+ (string-pad-start before-line-num max-line-num-width) \" \" before-line \"\\n\"\n       (string-pad-start line-num max-line-num-width) \" \" line \"\\n\"\n       (string-repeat \" \" max-line-num-width) \" \" caret-line \"\\n\"\n       (string-pad-start after-line-num max-line-num-width) \" \" after-line)))\n\n(defn reader-error [reader pos msg]\n  (error (+ msg \"\\n\\n\" (marked-line (.-input reader) pos))))\n\n(defn read-until [reader end-char start-pos]\n  (let [has-indent-error false,\n        start-index (- (.-index reader) 1),\n        start-line (.-line start-pos),\n        start-indent (.-column start-pos)]\n    (loop [results (list)]\n      (if (not has-indent-error)\n        (let [last-pos (reader-pos reader)]\n          (skip-whitespace reader)\n          (let [pos (reader-pos reader),\n                line (.-line pos),\n                indent (.-column pos)]\n            (if (and (> line start-line) (<= indent start-indent))\n              (do\n                (set! has-indent-error true)\n                (reader-indent-warning reader start-index end-char last-pos))))))\n      (let [char (peek-char reader)]\n        (cond\n          [(nil? char)\n           (reader-unterminated-error reader start-index start-pos end-char)]\n          [(= char end-char)\n           (read-char reader)\n           results]\n          [else (recur (append results (read-syntax reader)))])))))\n\n(defn read [reader pos]\n  (skip-whitespace reader)\n  (let [c (peek-char reader)]\n    (cond\n      [(char-digit? c) (read-number reader)]\n      [(char-macro? c)\n       (let [macro (hash-map-get reader-macros c)]\n         (read-char reader)\n         (macro reader c pos))]\n      [(and (or (= c \\+) (= c \\-))\n            (char-digit? (peek-char reader 1)))\n       (read-number reader)]\n      [else (parse-token (read-token reader))])))\n\n(defn read-syntax [reader]\n  (let [start-pos (reader-pos reader),\n        form (read reader start-pos),\n        end-pos (reader-pos reader)]\n    (if (not-nil? form)\n      (meta-set! form {loc: {source: (.-input reader),\n                             start: start-pos,\n                             end: end-pos}}))\n    form))\n\n(defn read-many [reader]\n  (loop [results (list)]\n    (skip-whitespace reader)\n    (if (has-more? reader)\n      (recur (append results (read-syntax reader)))\n      results)))\n\n(defn string->expr [str]\n  (read-syntax (make-string-reader str)))\n\n(defn string->exprs [str]\n  (read-many (make-string-reader str)))\n\n(hash-map-set! reader-macros \\' read-quote)\n(hash-map-set! reader-macros \\` read-syntax-quote)\n(hash-map-set! reader-macros \\& read-spread)\n(hash-map-set! reader-macros \\~ read-unquote)\n(hash-map-set! reader-macros \\\\ read-character)\n(hash-map-set! reader-macros \\\" read-string)\n(hash-map-set! reader-macros \\( read-list)\n(hash-map-set! reader-macros \\) read-unmatched-delimiter)\n(hash-map-set! reader-macros \\[ read-array)\n(hash-map-set! reader-macros \\] read-unmatched-delimiter)\n(hash-map-set! reader-macros \\{ read-struct)\n(hash-map-set! reader-macros \\} read-unmatched-delimiter)\n; -*- mode: Clojure -*-\n\n(def js-keywords (set \"var\" \"let\" \"const\"))\n\n(defn compiler-error [form msg]\n  (if (and (meta form) (.-loc (meta form)))\n    (let [loc (.-loc (meta form)),\n          source (.-source loc),\n          pos (.-start loc)]\n      (error (+ msg \"\\n\\n\" (marked-line source pos))))\n    (error msg)))\n\n(defn make-env []\n  {functions: (hash-map),\n   function-nodes: (hash-map),\n   variables: (hash-map),\n   is-loop: false})\n\n(defn child-env [env]\n  {variables: (hash-map-copy (.-variables env))\n   loop-variables: (.-loopVariables env),\n   functions: (.-functions env),\n   function-nodes: (.-functionNodes env),\n   is-loop: false})\n\n(defn recur-env [env]\n  {variables: (hash-map-copy (.-variables env))\n   loop-variables: (js/array),\n   functions: (.-functions env),\n   function-nodes: (.-functionNodes env),\n   is-loop: true})\n\n(defn replace-special-chars [ident]\n  (.replace (.replace (.replace (.replace ident \"!\" \"\")\n                                \"->\" \"-to-\")\n                      (regex \"^((contains|has).*)\\\\?$\") \"$1\")\n            (regex \"^(.*)\\\\?$\") \"is-$1\"))\n\n(defn kebabcase->camelcase [ident]\n  (.replace (replace-special-chars ident)\n            (regex \"[-_]([a-zA-Z])\" \"g\")\n            (fn [match p1] (.toUpperCase p1))))\n\n(defn sanitize-js-keywords [ident]\n  (if (js-keyword? ident)\n    (concat ident \"$\")\n    ident))\n\n(defn symbol->ident [symbol]\n  (cond\n    [(= symbol 'Symbol) \"LispSymbol\"]\n    [else (sanitize-js-keywords (kebabcase->camelcase (symbol->string symbol)))]))\n\n(defn define-variable [env symbol]\n  (let [variables (.-variables env)]\n    (if (not (contains-key? variables symbol))\n      (hash-map-set! variables symbol (symbol->ident symbol)))\n    (if (.-isLoop env)\n      (.push (.-loopVariables env) symbol))\n    (resolve-var env symbol)))\n\n(defn define-function [env name func]\n  (let [functions (.-functions env)]\n    (if (contains-key? functions name)\n      (error (+ \"Function already defined: \" (symbol->string name)))\n      (hash-map-set! functions name func))\n    nil))\n\n(defn resolve-var [env symbol]\n  (let [variables (.-variables env),\n        functions (.-functions env),\n        function-nodes (.-functionNodes env),\n        string (symbol->string symbol),\n        loc (if (meta symbol) (.-loc (meta symbol)))]\n    (cond\n      [(string-prefix? string \"js/\")\n       {type: \"Identifier\",\n        name: (.substring string 3),\n        originalName: string,\n        loc: loc}]\n      [(contains-key? variables symbol)\n       {type: \"Identifier\",\n        name: (hash-map-get variables symbol),\n        originalName: string,\n        loc: loc}]\n      [(contains-key? functions symbol)\n       (if (not (contains-key? function-nodes symbol))\n         (compile-function env (hash-map-get functions symbol)))\n       {type: \"Identifier\",\n        name: (.-ident (hash-map-get functions symbol)),\n        originalName: string,\n        loc: loc}]\n      [else\n       (compiler-error symbol (+ \"Variable or function not found: \" string \" - \"\n                                 (map (.from js/Array (.keys variables)) symbol->string) \" - \"\n                                 (map (.from js/Array (.keys functions)) symbol->string)))])))\n\n(defn compile-function [env func]\n  (let [func-env (child-env env)]\n    (hash-map-set! (.-functionNodes env)\n                   (.-name func) 'placeholder)\n    (hash-map-set! (.-functionNodes env)\n                   (.-name func)\n                   {type: \"FunctionDeclaration\",\n                    id: {type: \"Identifier\",\n                         name: (.-ident func),\n                         originalName: (symbol->string (.-name func)),\n                         loc: (.-loc (meta (.-name func)))},\n                    params: (emit-patterns func-env (.-params func)),\n                    body: (emit-return-block func-env (.-body func)),\n                    generator: (.-generator func),\n                    loc: (.-loc func)})))\n; -*- mode: Clojure -*-\n\n(def emit-specials (hash-map))\n\n;; Predicates\n\n(defn field-access? [form]\n  (and (symbol? form)\n       (string-prefix? (symbol->string form) \".-\")))\n\n(defn method-call? [form]\n  (and (symbol? form)\n       (string-prefix? (symbol->string form) \".\")))\n\n(defn special? [form]\n  (and (symbol? form)\n       (contains-key? emit-specials form)))\n\n(defn js-keyword? [ident]\n  (set-contains? js-keywords ident))\n\n(defn expression? [node]\n  (let [type (.-type node)]\n    (or (= type \"Literal\")\n        (= type \"Identifier\")\n        (string-suffix? type \"Expression\")\n        (string-suffix? type \"Element\"))))\n\n;; AST Transformation\n\n(defn statement->iife [node]\n  {type: \"CallExpression\",\n   callee: {type: \"ArrowFunctionExpression\",\n            id: nil,\n            params: (js/array),\n            body: {type: \"BlockStatement\",\n                   body: (js/array (statement->return node)),\n                   loc: (.-loc node)}},\n   arguments: (js/array)})\n\n(defn statement->expression [node]\n  (statement->iife node))\n\n(defn statements->return [nodes]\n  (if (empty? nodes)\n    (js/array {:type \"ReturnStatement\",\n               :argument nil})\n    (map-last nodes nil statement->return)))\n\n(defn statement->return [node]\n  (let [type (.-type node)]\n    (cond\n      [(= type \"ReturnStatement\") node]\n      [(= type \"ForOfStatement\") node]\n      [(= type \"ContinueStatement\") node]\n      [(= type \"ThrowStatement\") node]\n      [(= type \"ExpressionStatement\")\n       {type: \"ReturnStatement\",\n        argument: (.-expression node),\n        loc: (.-loc node)}]\n      [(= type \"BlockStatement\")\n       {type: \"BlockStatement\",\n        body: (statements->return (.-body node)),\n        loc: (.-loc node)}]\n      [(= type \"WhileStatement\")\n       {type: \"WhileStatement\",\n        test: (.-test node),\n        body: (statement->return (.-body node)),\n        loc: (.-loc node)}]\n      [(= type \"IfStatement\")\n       {type: \"IfStatement\",\n        test: (.-test node),\n        consequent: (statement->return (.-consequent node)),\n        alternate: (if (.-alternate node)\n                       (statement->return (.-alternate node))\n                       nil),\n        loc: (.-loc node)}]\n      [else (error (concat \"Unsupported return statement: \" type))])))\n\n;; AST Generation of specific types\n\n(defn emit-return-last [env forms]\n  (filter-not-nil (map-last forms (fn [form] (emit-statement env form))\n                                  (fn [form] (emit-return-statement env form)))))\n\n(defn emit-return-block [env forms]\n  {type: \"BlockStatement\",\n   body: (emit-return-last env forms)})\n\n(defn emit-return-statement [env form]\n  (let [node (emit env form)]\n    (if (expression? node)\n      {type: \"ReturnStatement\",\n       argument: node,\n       loc: (.-loc node)}\n      (statement->return node))))\n\n(defn emit-statements [env forms]\n  (map-not-nil forms (fn [form] (emit-statement env form))))\n\n(defn emit-statement [env form]\n  (let [node (emit env form)]\n    (cond\n      [(nil? node) node]\n      [(expression? node)\n       {type: \"ExpressionStatement\",\n        expression: node,\n        loc: (.-loc node)}]\n      [else node])))\n\n(defn emit-expressions [env forms]\n  (map-not-nil forms (fn [form] (emit-expression env form))))\n\n(defn emit-expression [env form]\n  (let [node (emit env form)]\n    (cond\n      [(nil? node) node]\n      [(expression? node) node]\n      [else (statement->expression node)])))\n\n(defn emit-patterns [env forms]\n  (map forms (fn [form] (emit-pattern env form))))\n\n(defn emit-pattern [env form]\n  (cond\n    [(symbol? form)\n     (define-variable env form)]\n    [(tagged-list? form 'spread)\n     {type: \"RestElement\",\n      argument: (define-variable env (second form)),\n      loc: (.-loc (meta form))}]\n    [(list? form)\n     {type: \"ArrayPattern\",\n      elements: (emit-patterns env form)}]\n    [else (compiler-error form \"Unrecognized pattern\")]))\n\n(defn emit-block [env forms]\n  (if (single? forms)\n    (emit-statement env (first forms))\n    {type: \"BlockStatement\",\n     body: (emit-statements env forms)}))\n\n;; AST Generation\n\n(defn emit-module [forms]\n  (let [env (make-env),\n        nodes (emit-statements env forms),\n        function-nodes (.-functionNodes env)]\n    {type: \"Program\",\n     body: (js/array &(.values function-nodes) &nodes)}))\n\n(defn emit [env form]\n  (cond\n    [(symbol? form) (emit-var env form)]\n    [(list? form) (emit-list env form)]\n    [else (emit-literal env form)]))\n\n(defn emit-literal [env form]\n  (cond\n    [(js/=== form js/undefined) (error \"Undefined!\")]\n    [(keyword? form) (emit env (list 'string->keyword (keyword->string form)))]\n    [(negative? form)\n     {type: \"UnaryExpression\",\n      operator: \"-\",\n      prefix: true,\n      argument: {type: \"Literal\",\n                 value: (neg (unbox form))},\n      loc: (if (and (not-nil? form) (meta form)) (.-loc (meta form)))}]\n    [else {type: \"Literal\",\n           value: (unbox form),\n           loc: (if (and (not-nil? form) (meta form)) (.-loc (meta form)))}]))\n\n(defn emit-var [env symbol]\n  (resolve-var env symbol))\n\n(defn emit-list [env form]\n  (let [loc (if (meta form) (.-loc (meta form))),\n        callee (first form),\n        args (skip1 form)]\n    (cond\n      [(field-access? callee) (emit-field env loc callee args)]\n      [(method-call? callee) (emit-methodcall env loc callee args)]\n      [(special? callee) ((hash-map-get emit-specials callee) env loc args)]\n      [else (emit-funcall env loc callee args)])))\n\n(defn emit-field [env loc callee args]\n  (let [field-name (.substring (symbol->string callee) 2)\n        obj (first args)]\n    {type: \"MemberExpression\",\n     object: (emit-expression env obj),\n     property: {type: \"Identifier\",\n                name: field-name,\n                loc: (.-loc (meta callee))},\n     computed: false,\n     loc: loc}))\n\n(defn emit-methodcall [env loc callee args]\n  (let [method-name (.substring (symbol->string callee) 1)\n        obj (first args)\n        method-args (skip1 args)]\n    {type: \"CallExpression\",\n     callee: {type: \"MemberExpression\",\n              object: (emit-expression env obj),\n              property: {type: \"Identifier\",\n                         name: method-name,\n                         loc: (.-loc (meta callee))},\n              computed: false},\n     arguments: (emit-expressions env method-args),\n     loc: loc}))\n\n(defn emit-funcall [env loc callee args]\n  {type: \"CallExpression\",\n   callee: (emit-expression env callee),\n   arguments: (emit-expressions env args),\n   loc: loc})\n\n(defn emit-defn [env loc args]\n  (let [name (first args)\n        ident (symbol->ident name)\n        params (second args)\n        rest (skip2 args)\n        docs (if (and (string? (first rest))\n                      (not-empty? (skip1 rest)))\n                 (first rest))\n        body (if docs (skip1 rest) rest)\n        func-env (child-env env)]\n    (define-function env name {name: name,\n                               ident: ident,\n                               params: params,\n                               docs: docs,\n                               body: body,\n                               loc: loc,\n                               generator: false})))\n\n(hash-map-set! emit-specials 'defn emit-defn)\n\n(defn emit-defgen [env loc args]\n  (let [name (first args)\n        ident (symbol->ident name)\n        params (second args)\n        rest (skip2 args)\n        docs (if (and (string? (first rest))\n                      (not-empty? (skip1 rest)))\n                 (first rest))\n        body (if docs (skip1 rest) rest)\n        func-env (child-env env)]\n    (define-function env name {name: name,\n                               ident: ident,\n                               params: params,\n                               docs: docs,\n                               body: body,\n                               loc: loc,\n                               generator: true})))\n\n(hash-map-set! emit-specials 'defgen emit-defgen)\n\n(defn emit-set [env loc args]\n  (let [setter (first args)\n        value (second args)]\n    (cond\n      [(symbol? setter) (emit-set-var env loc setter value)]\n      [(list? setter) (emit-setter env loc setter value)]\n      [else (error (concat \"Invalid setter: \" (repr setter)))])))\n\n(defn emit-setter [env loc setter value]\n  (let [callee (first setter)\n        args (skip1 setter)]\n    (cond\n      [(field-access? callee) (emit-set-field env loc callee args value)]\n      [(= callee 'nth) (emit-set-index env loc args value)]\n      [else (error (concat \"Invalid setter: \" (repr setter)))])))\n\n(defn emit-set-var [env loc symbol value]\n  {type: \"AssignmentExpression\",\n   operator: \"=\",\n   left: (resolve-var env symbol),\n   right: (emit-expression env value),\n   loc: loc})\n\n(defn emit-set-field [env loc symbol args value]\n  (let [field-name (.substring (symbol->string symbol) 2)\n        obj (first args)]\n    {type: \"AssignmentExpression\",\n     operator: \"=\",\n     left: {type: \"MemberExpression\",\n            object: (emit-expression env obj),\n            property: {type: \"Identifier\",\n                       name: field-name,\n                       loc: (.-loc (meta symbol))},\n            computed: false},\n     right: (emit-expression env value),\n     loc: loc}))\n\n(defn emit-set-index [env loc args value]\n  (let [obj (first args)\n        index (second args)]\n    {type: \"AssignmentExpression\",\n     operator: \"=\",\n     left: {type: \"MemberExpression\",\n            object: (emit-expression env obj),\n            property: (emit-expression env index),\n            computed: true},\n     right: (emit-expression env value),\n     loc: loc}))\n\n(hash-map-set! emit-specials 'set! emit-set)\n\n(defn emit-bin-op [op]\n  (fn [env loc args]\n    (if (empty? args)\n      (error \"Empty operator expression\"))\n    (.reduce (emit-expressions env args)\n            (fn [acc, arg]\n              {type: \"BinaryExpression\",\n               operator: op,\n               left: acc,\n               right: arg,\n               loc: loc}))))\n\n(hash-map-set! emit-specials 'and (emit-bin-op \"&&\"))\n(hash-map-set! emit-specials 'or (emit-bin-op \"||\"))\n(hash-map-set! emit-specials 'js/and (emit-bin-op \"&&\"))\n(hash-map-set! emit-specials 'js/or (emit-bin-op \"||\"))\n(hash-map-set! emit-specials 'js/=== (emit-bin-op \"===\"))\n(hash-map-set! emit-specials 'js/!== (emit-bin-op \"!==\"))\n(hash-map-set! emit-specials 'js/== (emit-bin-op \"==\"))\n(hash-map-set! emit-specials 'js/!= (emit-bin-op \"!=\"))\n(hash-map-set! emit-specials '= (emit-bin-op \"===\"))\n(hash-map-set! emit-specials '!= (emit-bin-op \"!==\"))\n(hash-map-set! emit-specials '>= (emit-bin-op \">=\"))\n(hash-map-set! emit-specials '<= (emit-bin-op \"<=\"))\n(hash-map-set! emit-specials '> (emit-bin-op \">\"))\n(hash-map-set! emit-specials '< (emit-bin-op \"<\"))\n(hash-map-set! emit-specials '+ (emit-bin-op \"+\"))\n(hash-map-set! emit-specials '- (emit-bin-op \"-\"))\n(hash-map-set! emit-specials '* (emit-bin-op \"*\"))\n(hash-map-set! emit-specials '/ (emit-bin-op \"/\"))\n(hash-map-set! emit-specials 'mod (emit-bin-op \"%\"))\n(hash-map-set! emit-specials 'js/instanceof (emit-bin-op \"instanceof\"))\n\n(defn emit-spread [env loc args]\n  {type: \"SpreadElement\",\n   argument: (emit-expression env (first args)),\n   loc: loc})\n\n(hash-map-set! emit-specials 'spread emit-spread)\n\n(defn emit-array [env loc args]\n  {type: \"ArrayExpression\",\n   elements: (emit-expressions env args),\n   loc: loc})\n\n(hash-map-set! emit-specials 'js/array emit-array)\n\n(defn emit-fn [env loc args]\n  (let [params (first args)\n        body (skip1 args)\n        func-env (child-env env)]\n    {type: \"ArrowFunctionExpression\",\n     id: nil,\n     params: (emit-patterns func-env params),\n     body: (emit-return-block func-env body),\n     loc: loc}))\n\n(hash-map-set! emit-specials 'fn emit-fn)\n\n(defn emit-if [env loc args]\n  (let [test (first args)\n        if-true (second args)\n        if-false (skip2 args)]\n    {type: \"IfStatement\",\n     test: (emit-expression env test),\n     consequent: (emit-statement env if-true),\n     alternate: (if (not-nil? if-false) (emit-block env if-false)),\n     loc: loc}))\n\n(hash-map-set! emit-specials 'if emit-if)\n\n(defn emit-for [env loc args]\n  (let [var (first (first args))\n        value (second (first args))\n        body (skip1 args)\n        for-env (child-env env)]\n    {type: \"ForOfStatement\",\n     left: (emit-pattern for-env var),\n     right: (emit-expression for-env value),\n     body: (emit-block for-env body),\n     loc: loc}))\n\n(hash-map-set! emit-specials 'for emit-for)\n\n(defn emit-def [env loc args]\n  {type: \"VariableDeclaration\",\n   kind: \"let\",\n   declarations: (js/array {type: \"VariableDeclarator\",\n                            id: (define-variable env (first args)),\n                            init: (emit-expression env (second args)),\n                            loc: loc}),\n   loc: loc})\n\n(hash-map-set! emit-specials 'def emit-def)\n\n(defn emit-vars [env vars]\n  {type: \"VariableDeclaration\",\n   kind: \"let\",\n   declarations: (map (.from js/Array (grouped vars 2))\n                      (fn [pair]\n                        {type: \"VariableDeclarator\",\n                         id: (define-variable env (first pair)),\n                         init: (emit-expression env (second pair))})),\n   loc: (.-loc (meta vars))})\n\n(defn emit-let [env loc args]\n  (let [vars (first args)\n        body (skip1 args)\n        let-env (child-env env)]\n    {type: \"BlockStatement\",\n     body: (js/array (emit-vars let-env vars) &(emit-statements let-env body)),\n     loc: loc}))\n\n(hash-map-set! emit-specials 'let emit-let)\n\n(defn emit-cond [env loc args]\n  (let [expr (first args),\n        rest (skip1 args),\n        test (first expr),\n        body (skip1 expr)]\n    (if (= test 'else)\n      (emit-block env body)\n      {type: \"IfStatement\",\n       test: (emit-expression env test),\n       consequent: (emit-block env body),\n       alternate: (if (not-empty? rest) (emit-cond env loc rest))})))\n\n(hash-map-set! emit-specials 'cond emit-cond)\n\n(defn emit-loop [env loc args]\n  (let [vars (first args)\n        body (skip1 args)\n        loop-env (recur-env env)]\n    (if (empty? vars)\n      {type: \"WhileStatement\",\n       test: (emit-literal loop-env true),\n       body: (emit-return-block loop-env body)}\n      {type: \"BlockStatement\",\n       body: (js/array (emit-vars loop-env vars)\n                       {type: \"WhileStatement\",\n                        test: (emit-literal loop-env true),\n                        body: (emit-return-block loop-env body)})})))\n\n(hash-map-set! emit-specials 'loop emit-loop)\n\n(defn emit-do [env loc args]\n  {type: \"BlockStatement\",\n   body: (emit-statements env args),\n   loc: loc})\n\n(hash-map-set! emit-specials 'do emit-do)\n\n(defn emit-yield [env loc args]\n  {type: \"YieldExpression\",\n   argument: (emit-expression env (first args)),\n   loc: loc})\n\n(hash-map-set! emit-specials 'yield emit-yield)\n\n(defn emit-recur [env loc args]\n  (if (!= (.-length (.-loopVariables env)) (.-length args))\n    (error (+ \"Recur with not enough args\" (.-length (.-loopVariables env)) (.-length args))))\n  (if (empty? args)\n    {type: \"ContinueStatement\",\n     loc: loc}\n    {type: \"BlockStatement\",\n     body: (js/array &(map (zip (.-loopVariables env) args)\n                           (fn [pair]\n                             {type: \"ExpressionStatement\",\n                              expression: {type: \"AssignmentExpression\",\n                                           operator: \"=\",\n                                           left: (emit-pattern env (first pair)),\n                                           right: (emit-expression env (second pair))}}))\n                    {type: \"ContinueStatement\"}),\n     loc: loc}))\n\n(hash-map-set! emit-specials 'recur emit-recur)\n\n(defn emit-dict [env ctx args]\n  {type: \"ObjectExpression\",\n   properties: (map (.from js/Array (grouped args 2))\n                    (fn [pair]\n                      {type: \"Property\",\n                       key: (if (keyword? (first pair))\n                              (emit-literal env (kebabcase->camelcase (keyword->string (first pair))))\n                              (emit-literal env (first pair))),\n                       value: (emit-expression env (second pair))}))})\n\n(hash-map-set! emit-specials 'dict emit-dict)\n\n(defn emit-quote [env loc args]\n  (emit env (knight-quote (first args))))\n\n(defn knight-quote [form]\n  (cond\n    [(symbol? form) (list 'string->symbol (symbol->string form))]\n    [(list? form) (list 'js/array &(map form knight-quote))]\n    [else form]))\n\n(hash-map-set! emit-specials 'quote emit-quote)\n\n(defn emit-return [env loc args]\n  {type: \"ReturnStatement\",\n   argument: (if (not-empty? args)\n               (emit-expression env (first args))\n               nil),\n   loc: loc})\n\n(hash-map-set! emit-specials 'js/return emit-return)\n\n(defn emit-throw [env loc args]\n  {type: \"ThrowStatement\",\n   argument: (emit-expression env (first args)),\n   loc: loc})\n\n(hash-map-set! emit-specials 'js/throw emit-throw)\n\n(defn emit-new [env loc args]\n  {type: \"NewExpression\",\n   callee: (emit-expression env (first args)),\n   arguments: (emit-expressions env (skip1 args)),\n   loc: loc})\n\n(hash-map-set! emit-specials 'js/new emit-new)\n\n(defn emit-index [env ctx args]\n  (let [obj (first args)\n        index (second args)]\n    {type: \"MemberExpression\",\n     object: (emit-expression env obj),\n     property: (emit-expression env index),\n     computed: true}))\n\n(hash-map-set! emit-specials 'nth emit-index)\n; -*- mode: Clojure -*-\n(js/require \"source-map-support/register\")\n\n(def fs (js/require \"fs\"))\n(def path (js/require \"path\"))\n(def escodegen (js/require \"escodegen\"))\n(def terser (js/require \"terser\"))\n(def program (.-program (js/require \"commander\")))\n\n(.option program \"-o, --output <filename>\" \"Output JS filename\")\n(.option program \"-m, --map\" \"Generate source maps\")\n\n(.parse program (.-argv js/process))\n\n(let [output-filename (.-output program),\n      output-dirname (if output-filename (.dirname path output-filename)),\n      source-map-filename (if (.-map program) (if output-filename (+ (.basename path output-filename) \".map\") \"inline\")),\n      code (.readFileSync fs 0 \"utf-8\"),\n      forms (string->exprs code),\n      ast (emit-module forms),\n      output (.generate escodegen ast {sourceMap: \"stdin\", sourceMapWithCode: true, sourceContent: code}),\n      source-map (.toString (.-map output))]\n  (if (.-error output)\n    (.error js/console (.-error output))\n    (if output-filename\n      (do\n        (.writeFileSync fs output-filename (.-code output))\n        (if (and source-map-filename (!= source-map-filename \"inline\"))\n          (.writeFileSync fs (.join path output-dirname source-map-filename) (.toString (.-map output)))))\n      (println (.-code output)))))\n"]}